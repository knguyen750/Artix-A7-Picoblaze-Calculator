KCPSM6 Assembler log file for program 'D:\School\EGRE642\Module 9_10\Lab 6\lab6_top\lab6_top.srcs\sources_1\imports\Picoblaze_Tools\lab6_starter.psm'.
Generated by KCPSM6 version v2.70
Ken Chapman - Xilinx Ltd - 16th May 2014

Assembly datestamp: 06 Aug 2024
Assembly timestamp: 09:44:49

Contents
  Assembly listing
  List of PSM files
  List of CONSTANTs
  List of TABLEs
  List of STRINGs
  List of line labels
  Instruction usage statistics


Last occupied address: 05D hex
Nominal program memory size: 1K (1024)   address(9:0)
Actual memory size: 4096
  (Default memory size)
Occupied memory locations: 94
Memory locations available: 4002


Assembly listing

 Addr Code                 Instruction

 000                       ; Author: K. Newlander
 000                       ; LAB6 Starter Design that contains a global register that defaults to 0 on startup
 000                       ; Adds '1' for each press of BTNR
 000                       ; Subtracts '1' for each press of BTNL
 000                       ; Extra ASM to fix issue with Vivado (see documentation), Skips Address 03
 000  22004                JUMP 004[cold_start]
 001  22004                JUMP 004[cold_start]
 002  22004                JUMP 004[cold_start]
 003  22004                JUMP 004[cold_start]
 004                       ; Cold Start
 004           cold_start: 
 004                       ; SLIDERS are assigned to PORT 02
 004                       ; PUSHBTNs are assigned to PORT 03
 004                       ; PUSHBTN(0) is used to initiate operation
 004                       ; PUSHBTN(3) is used to reset design
 004                       ; NOTE: (s# usage):
 004                       ; s0,s1,s2 - Used in delay subroutines
 004                       ; s3,s4 - Stores two global registers for 16-bit value to display
 004                       ; s5 - Stores the debounced push btn signal
 004                       ; s6 - Debounced register
 004                       ; s7    -   Switch[7:0]
 004                       ; s8    -   Switch[3:0] operand for add and sub operations
 004                       ; s9    -   Switch[3:0] used for counters in left shift and multiply operations
 004                       ; sA -   Switch[7:4] selects from 4 different operations (add, sub, left-shift, multiply)
 004                       ; sB    -   Multiplication temp. result register (lsbs)
 004                       ; sC    -   Multiplication temp. result register (msbs)
 004  01300         reset: LOAD s3, 00                ;reset ALU setpoint to 0
 005  01400                LOAD s4, 00                ;reset ALU setpoint to 0
 006  2D304                OUTPUT s3, 04              ;display reset values
 007  2D405                OUTPUT s4, 05              ;display reset values
 008  01500                LOAD s5, 00
 009  01600                LOAD s6, 00
 00A  01700                LOAD s7, 00
 00B  01800                LOAD s8, 00
 00C  01900                LOAD s9, 00
 00D  01A00                LOAD sA, 00
 00E  01B00                LOAD sB, 00
 00F  01C00                LOAD sC, 00
 010                       ;; wait for btn 3 to be depressed to exit reset state
 010  09503                INPUT s5, 03
 011  0D508                TEST s5, 08
 012  36004                JUMP NZ, 004[reset]        ;stay in reset until 'depressed'
 013                       ; Main Processing Loop
 013                       ; Runs debouncer on input push btns
 013                       ; Checks current state of push btns to perform operation
 013               mainlp: ; Store sliders
 013  09702                INPUT s7, 02               ; store sliders
 014  00870                LOAD s8, s7                ; store copy of sliders into operand register
 015  0380F                AND s8, 0F                 ; mask upper 4 bits, only use lower 4 bits for operand
 016  00980                LOAD s9, s8                ; store copy of operand as counter for mult/shift operations
 017  00A70                LOAD sA, s7                ; store copy of sliders into operator register
 018  01B00                LOAD sB, 00                ; reset multiplication reg. values
 019  01C00                LOAD sC, 00                ; reset multiplication reg. values
 01A  03AF0                AND sA, F0                 ; mask lower 4 bits, only use upper 4 bits for operator
 01B  09503                INPUT s5, 03               ; Store push buttons
 01C  20054                CALL 054[del10ms]          ; Debounce/delay
 01D  09603                INPUT s6, 03               ; store push buttons again
 01E  02560                AND s5, s6                 ; Debounce/delay
 01F                       ; Determine if Btn0 was pressed
 01F  0D501                TEST s5, 01
 020  34026                CALL NZ, 026[opcheck]
 021                       ; Determine if Btn3 was pressed
 021  0D508                TEST s5, 08
 022  36004                JUMP NZ, 004[reset]        ; Reset
 023                       ; Update Displays
 023  2D304                OUTPUT s3, 04              ; Update Display with ALU REG
 024  2D405                OUTPUT s4, 05
 025  22013                JUMP 013[mainlp]
 026                       ;; Check switches[7:4] for operation type
 026                       ;; All zeroes results in no operation
 026  0DA10       opcheck: TEST sA, 10
 027  3602F                JUMP NZ, 02F[opadd]        ; Start Addition
 028  0DA20                TEST sA, 20
 029  36035                JUMP NZ, 035[opsub]        ; Start Subtraction
 02A  0DA40                TEST sA, 40
 02B  3603E                JUMP NZ, 03E[opleftshift]  ; Start Left Shift
 02C  0DA80                TEST sA, 80
 02D  36047                JUMP NZ, 047[opmult]       ; Start Multiplication
 02E  25000    endopcheck: RETURN 
 02F                       ; ADD OPERATION
 02F                       ; Handles Carry
 02F  10380         opadd: ADD s3, s8
 030  13400                ADDCY s4, 00
 031  09503        addend: INPUT s5, 03               ; store current BTNR value
 032  0D501                TEST s5, 01                ; check if BTNR is still being pressed
 033  36031                JUMP NZ, 031[addend]       ; loop until BTNR is released
 034  2202E                JUMP 02E[endopcheck]       ; BTNR released
 035                       ; SUBTRACT OPERATION
 035                       ; Basic Subtract
 035  18380         opsub: SUB s3, s8
 036  1B400                SUBCY s4, 00
 037  09503        subend: INPUT s5, 03               ; store current BTNR value
 038  0D501                TEST s5, 01                ; check if BTNR is still being pressed
 039  36037                JUMP NZ, 037[subend]       ; loop until BTNR is released
 03A  2202E                JUMP 02E[endopcheck]       ; BTNR released
 03B                       ; LEFT SHIFT OPERATION
 03B  14306     shiftloop: SL0 s3
 03C  14400                SLA s4
 03D  19901                SUB s9, 01
 03E  0D9FF   opleftshift: TEST s9, FF
 03F  3603B                JUMP NZ, 03B[shiftloop]
 040  09503  leftshiftend: INPUT s5, 03               ; store current BTNR value
 041  0D501                TEST s5, 01                ; check if BTNR is still being pressed
 042  36040                JUMP NZ, 040[leftshiftend] ; loop until BTNR is released
 043  2202E                JUMP 02E[endopcheck]       ; BTNR released
 044                       ; MULTIPLY OPERATION
 044  10B30      multloop: ADD sB, s3                 ; temp_result_lsb = result + result (repeated m - 1 times)
 045  12C40                ADDCY sC, s4               ; temp_result_msb = carry + carry (repeated m - 1 times)
 046  19901                SUB s9, 01                 ; counter performs multiplication by repeating addition m - 1 times
 047  1D900        opmult: COMPARE s9, 00             ; if counter = 0, then multiplication loop complete
 048  36044                JUMP NZ, 044[multloop]     ; if counter > 0, then continue multiplication loop
 049  09503       multend: INPUT s5, 03               ; store current BTNR value
 04A  0D501                TEST s5, 01                ; check if BTN0 is still being pressed
 04B  36049                JUMP NZ, 049[multend]      ; loop until BTNR is released
 04C  003B0                LOAD s3, sB                ; store final mult. value in result register
 04D  004C0                LOAD s4, sC                ; store final mult. value in result register
 04E  2202E                JUMP 02E[endopcheck]       ; BTNR released
 04F                       ;;HELPER FUNCTIONS FROM TESTPROG (used for delay in top level, added a 10ms delay)
 04F  09007         delms: INPUT s0, 07
 050  09107       delmslp: INPUT s1, 07
 051  1C010                COMPARE s0, s1
 052  32050                JUMP Z, 050[delmslp]
 053  25000                RETURN 
 054  012F5       del10ms: LOAD s2, F5                ;load 245
 055  2004F     del10mslp: CALL 04F[delms]
 056  11201                ADD s2, 01
 057  36055                JUMP NZ, 055[del10mslp]
 058  25000                RETURN 
 059  01205      del250ms: LOAD s2, 05
 05A  2004F    del250mslp: CALL 04F[delms]
 05B  11201                ADD s2, 01
 05C  3605A                JUMP NZ, 05A[del250mslp]
 05D  25000                RETURN 


All unused memory locations contain zero (equivalent to 'LOAD s0, s0')



List of PSM files that have been assembled

D:\School\EGRE642\Module 9_10\Lab 6\lab6_top\lab6_top.srcs\sources_1\imports\Picoblaze_Tools\lab6_starter.psm



List of defined constants

 CONSTANT name     Value        Source PSM File

 timestamp_hours   09'd         
 timestamp_minutes 44'd         
 timestamp_seconds 49'd         
 datestamp_year    24'd         
 datestamp_month   8'd          
 datestamp_day     06'd         
 NUL               00           
 BEL               07           
 BS                08           
 HT                09           
 LF                0A           
 VT                0B           
 CR                0D           
 ESC               1B           
 DEL               7F           
 DCS               90           
 ST                9C           



No TABLEs defined



List of text strings

 STRING name       String         Source PSM File

 KCPSM6_version$   "v2.70"        
 datestamp$        "06 Aug 2024"  
 timestamp$        "09:44:49"     



List of line labels

   Label          Addr  Source PSM File

   cold_start     004   lab6_starter.psm
   reset          004   lab6_starter.psm
   mainlp         013   lab6_starter.psm
   opcheck        026   lab6_starter.psm
   endopcheck     02E   lab6_starter.psm
   opadd          02F   lab6_starter.psm
   addend         031   lab6_starter.psm
   opsub          035   lab6_starter.psm
   subend         037   lab6_starter.psm
   shiftloop      03B   lab6_starter.psm
   opleftshift    03E   lab6_starter.psm
   leftshiftend   040   lab6_starter.psm
   multloop       044   lab6_starter.psm
   opmult         047   lab6_starter.psm
   multend        049   lab6_starter.psm
   delms          04F   lab6_starter.psm
   delmslp        050   lab6_starter.psm
   del10ms        054   lab6_starter.psm
   del10mslp      055   lab6_starter.psm
 * del250ms       059   lab6_starter.psm
   del250mslp     05A   lab6_starter.psm

      * Line label has not been referenced in any instructions.
        Hint - This may indicate unused code that could be
               removed to reduce the size of this program.



Instruction usage statistics

 Instruction    Instances

 LOAD             19
 STAR              -

 AND               3
 OR                -
 XOR               -

 ADD               4
 ADDCY             2
 SUB               3
 SUBCY             1

 TEST             12
 TESTCY            -
 COMPARE           2
 COMPARECY         -

 SL0               1
 SL1               -
 SLX               -
 SLA               1
 RL                -
 SR0               -
 SR1               -
 SRX               -
 SRA               -
 RR                -

 REGBANK           -

 INPUT            10
 OUTPUT            4
 OUTPUTK           -

 STORE             -
 FETCH             -

 DISABLE           -
 ENABLE            -
 RETURNI           -

 JUMP             24
 JUMP@             -
 CALL              4
 CALL@             -
 RETURN            4
 LOAD&RETURN       -

 HWBUILD           -



End of KCPSM6 log file.
